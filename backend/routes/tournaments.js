// backend/routes/tournaments.js
const express = require("express");
const prisma = require("../prismaClient");
const auth = require("../middleware/auth");
const isAdmin = require("../middleware/isAdmin");

const router = express.Router();

// –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)
router.post("/", auth, isAdmin, async (req, res) => {
  const { name, divisionId, type, format, startDate, endDate, maxTeams, prize, rules, discussion } = req.body;
  if (!name || !divisionId || !type || !startDate) {
    return res.status(400).json({ error: "–£–∫–∞–∂–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, divisionId, type, startDate" });
  }

  try {
    // –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∏–≤–∏–∑–∏–æ–Ω
    const division = await prisma.division.findUnique({ where: { id: parseInt(divisionId) }});
    if (!division) return res.status(400).json({ error: "Division not found" });

    const tournament = await prisma.tournament.create({
      data: {
        name,
        divisionId: parseInt(divisionId),
        type,
        format: format || "single_elim",
        startDate: new Date(startDate),
        endDate: endDate ? new Date(endDate) : null,
        maxTeams: maxTeams ? parseInt(maxTeams) : null,
        prize: prize ? parseInt(prize) : null,
        rules: rules || null,
        discussion: discussion || null,
      },
    });

    res.status(201).json(tournament);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
router.get("/", async (req, res) => {
  try {
    const tournaments = await prisma.tournament.findMany({
      include: {
        registrations: true,
        division: true,
      },
      orderBy: { startDate: "desc" }
    });

    // –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á—ë—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    const result = tournaments.map(t => ({
      ...t,
      currentTeams: t.registrations.filter(r => r.status === "registered").length
    }));

    res.json(result);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
router.get("/:id", async (req, res) => {
  const tournamentId = parseInt(req.params.id);
  if (Number.isNaN(tournamentId)) return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞" });

  try {
    const tournament = await prisma.tournament.findUnique({
      where: { id: tournamentId },
      include: {
        registrations: { include: { team: true } },
        matches: { include: { teamA: true, teamB: true } },
        division: true,
        complaints: true,
        discussionPosts: { include: { user: true, comments: { include: { user: true } } } }
      }
    });

    if (!tournament) return res.status(404).json({ error: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const currentTeams = tournament.registrations.filter(r => r.status === "registered").length;
    res.json({ ...tournament, currentTeams });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.post("/:id/generate", auth, isAdmin, async (req, res) => {
  const tournamentId = parseInt(req.params.id);

  try {
    const tournament = await prisma.tournament.findUnique({
      where: { id: tournamentId },
      include: { registrations: { where: { status: "registered" }, include: { team: true } } }
    });
    if (!tournament) return res.status(404).json({ error: "Tournament not found" });

    const teams = tournament.registrations.map(r => r.team);
    if (teams.length < 2) return res.status(400).json({ error: "Not enough teams to generate bracket" });

    // –¢–æ–ª—å–∫–æ single_elim –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    if (tournament.format !== "single_elim") {
      return res.status(400).json({ error: "Bracket generation implemented only for single_elim" });
    }

    // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–æ –≤–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º):
    // –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ < = 16 -> —Ñ–∏–Ω–∞–ª bo1
    // –µ—Å–ª–∏ 32..128 -> —Ñ–∏–Ω–∞–ª bo3
    // –µ—Å–ª–∏ >= 256 -> —Ñ–∏–Ω–∞–ª bo5
    let finalFormat = "bo1";
    if (teams.length >= 32 && teams.length <= 128) finalFormat = "bo3";
    if (teams.length >= 256) finalFormat = "bo5";

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    teams.sort(() => Math.random() - 0.5);

    const createdMatches = [];

    await prisma.$transaction(async (tx) => {
      // –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ —É —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ? (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - –º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ä—ã–µ
      // —Å–æ–∑–¥–∞—ë–º –ø–∞—Ä—ã: –µ—Å–ª–∏ –Ω–µ—á–µ—Ç ‚Äî –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç bye (teamBId = null)
      for (let i = 0; i < teams.length; i += 2) {
        const teamA = teams[i];
        const teamB = teams[i + 1];

        if (!teamB) {
          // bye: auto advance ‚Äî —Å–æ–∑–¥–∞—ë–º –º–∞—Ç—á —Å teamBId = null –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç teamA
          const m = await tx.match.create({
            data: {
              divisionId: tournament.divisionId,
              tournamentId: tournament.id,
              teamAId: teamA.id,
              teamBId: null,
              scheduled: tournament.startDate,
              result: "teamA"
            }
          });
          createdMatches.push({ ...m, format: "bye (auto-advance)" });
          continue;
        }

        // –æ–±—ã—á–Ω—ã–π –º–∞—Ç—á
        const isFinal = (i + 2 === teams.length); // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –≤ –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const format = isFinal ? finalFormat : "bo1";

        const m = await tx.match.create({
          data: {
            divisionId: tournament.divisionId,
            tournamentId: tournament.id,
            teamAId: teamA.id,
            teamBId: teamB.id,
            scheduled: tournament.startDate,
            result: null
          }
        });
        createdMatches.push({ ...m, format });
      }

      // –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä –≤ ongoing
      await tx.tournament.update({
        where: { id: tournament.id },
        data: { status: "ongoing" }
      });
    });

    res.json({ message: "Bracket generated", matches: createdMatches, finalFormat });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:", err);
    res.status(500).json({ error: "Server error" });
  }
});

/**
 * üìå –û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
 */
router.patch("/:id", auth, isAdmin, async (req, res) => {
  const tournamentId = parseInt(req.params.id);
  if (Number.isNaN(tournamentId)) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞" });
  }

  try {
    const tournament = await prisma.tournament.update({
      where: { id: tournamentId },
      data: req.body,
      include: { registrations: true },
    });

    res.json({
      ...tournament,
      currentTeams: tournament.registrations.filter(
        (r) => r.status === "registered"
      ).length,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * üìå –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
 */
router.delete("/:id", auth, isAdmin, async (req, res) => {
  const tournamentId = parseInt(req.params.id);
  if (Number.isNaN(tournamentId)) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞" });
  }

  try {
    await prisma.tournament.delete({ where: { id: tournamentId } });
    res.json({ message: "–¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
