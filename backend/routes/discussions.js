const express = require("express");
const prisma = require("../prismaClient");
const auth = require("../middleware/auth");

const router = express.Router();

/**
 * üìå –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 */
router.post("/posts", auth, async (req, res) => {
  const { tournamentId, content } = req.body;

  if (!tournamentId || !content) {
    return res.status(400).json({ error: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å tournamentId –∏ content" });
  }

  try {
    const tournament = await prisma.tournament.findUnique({ where: { id: tournamentId } });
    if (!tournament) {
      return res.status(404).json({ error: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const post = await prisma.discussionPost.create({
      data: {
        tournamentId,
        userId: req.user.id,
        content,
      },
    });

    res.status(201).json(post);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:", err);
    res.status(500).json({ error: "Server error" });
  }
});

/**
 * üìå –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞
 */
router.get("/posts/:tournamentId", async (req, res) => {
  const tournamentId = parseInt(req.params.tournamentId);

  try {
    const posts = await prisma.discussionPost.findMany({
      where: { tournamentId },
      include: {
        user: { select: { id: true, name: true } },
        comments: {
          include: { user: { select: { id: true, name: true } } },
          orderBy: { createdAt: "asc" },
        },
      },
      orderBy: { createdAt: "desc" },
    });

    res.json(posts);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:", err);
    res.status(500).json({ error: "Server error" });
  }
});

/**
 * üìå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
 */
router.post("/comments", auth, async (req, res) => {
  const { postId, content } = req.body;

  if (!postId || !content) {
    return res.status(400).json({ error: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å postId –∏ content" });
  }

  try {
    const post = await prisma.discussionPost.findUnique({ where: { id: postId } });
    if (!post) {
      return res.status(404).json({ error: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const comment = await prisma.discussionComment.create({
      data: {
        postId,
        userId: req.user.id,
        content,
      },
    });

    res.status(201).json(comment);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
    res.status(500).json({ error: "Server error" });
  }
});

/**
 * üìå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
 */
router.delete("/posts/:id", auth, async (req, res) => {
  const postId = parseInt(req.params.id);

  try {
    const post = await prisma.discussionPost.findUnique({ where: { id: postId } });
    if (!post) return res.status(404).json({ error: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (req.user.role !== "admin" && post.userId !== req.user.id) {
      return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    await prisma.discussionPost.delete({ where: { id: postId } });

    res.json({ message: "–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:", err);
    res.status(500).json({ error: "Server error" });
  }
});

/**
 * üìå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
 */
router.delete("/comments/:id", auth, async (req, res) => {
  const commentId = parseInt(req.params.id);

  try {
    const comment = await prisma.discussionComment.findUnique({ where: { id: commentId } });
    if (!comment) return res.status(404).json({ error: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (req.user.role !== "admin" && comment.userId !== req.user.id) {
      return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    await prisma.discussionComment.delete({ where: { id: commentId } });

    res.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
    res.status(500).json({ error: "Server error" });
  }
});

module.exports = router;
