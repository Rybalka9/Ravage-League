// backend/routes/divisions.js
const express = require("express");
const router = express.Router();
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const auth = require("../middleware/auth");
const isAdmin = require("../middleware/isAdmin");

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–≤–∏–∑–∏–æ–Ω–æ–≤
router.get("/", async (req, res) => {
  try {
    const divisions = await prisma.division.findMany({
      include: {
        teams: true,
        tournaments: true,
      },
    });
    res.json(divisions);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–≤–∏–∑–∏–æ–Ω–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–≤–∏–∑–∏–æ–Ω (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.post("/", auth, isAdmin, async (req, res) => {
  const { name, maxTeams, description } = req.body;

  if (!name) {
    return res.status(400).json({ error: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–≤–∏–∑–∏–æ–Ω–∞" });
  }

  try {
    const newDivision = await prisma.division.create({
      data: {
        name,
        maxTeams: maxTeams ? parseInt(maxTeams) : 0,
        description: description || null,
      },
    });
    res.json(newDivision);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–≤–∏–∑–∏–æ–Ω–∞:", err);
    res.status(500).json({ error: err.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –£–¥–∞–ª–∏—Ç—å –¥–∏–≤–∏–∑–∏–æ–Ω (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.delete("/:id", auth, isAdmin, async (req, res) => {
  const divisionId = parseInt(req.params.id);

  if (Number.isNaN(divisionId)) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" });
  }

  try {
    await prisma.division.delete({ where: { id: divisionId } });
    res.json({ message: "–î–∏–≤–∏–∑–∏–æ–Ω —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏–≤–∏–∑–∏–æ–Ω–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
