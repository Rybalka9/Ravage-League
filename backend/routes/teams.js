// backend/routes/teams.js
const express = require("express");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const auth = require("../middleware/auth");

const router = express.Router();

/**
 * üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
 */
router.get("/", async (req, res) => {
  try {
    const teams = await prisma.team.findMany({
      include: {
        memberships: {
          where: { leftAt: null },
          include: {
            user: { select: { id: true, name: true, email: true } },
          },
        },
        division: true,
      },
    });

    const formatted = teams.map((team) => ({
      id: team.id,
      name: team.name,
      division: team.division
        ? { id: team.division.id, name: team.division.name }
        : null,
      members: team.memberships.map((m) => ({
        id: m.user.id,
        name: m.user.name,
        email: m.user.email,
        role: m.role,
      })),
    }));

    res.json(formatted);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * üìå –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É (–∫–∞–ø–∏—Ç–∞–Ω)
 */
router.post("/", auth, async (req, res) => {
  const { name } = req.body;
  const userId = req.user?.id;

  if (!name || !name.trim()) {
    return res.status(400).json({ error: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã" });
  }
  if (!userId) {
    return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    const existing = await prisma.team.findUnique({ where: { name } });
    if (existing) {
      return res
        .status(409)
        .json({ error: "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    const team = await prisma.team.create({
      data: { name },
    });

    // –°–æ–∑–¥–∞—Ç–µ–ª—å ‚Üí –∫–∞–ø–∏—Ç–∞–Ω
    await prisma.teamMembership.create({
      data: {
        teamId: team.id,
        userId,
        role: "captain",
        joinedAt: new Date(),
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    const teamWithMembers = await prisma.team.findUnique({
      where: { id: team.id },
      include: {
        memberships: {
          where: { leftAt: null },
          include: { user: true },
        },
      },
    });

    res.status(201).json({
      id: teamWithMembers.id,
      name: teamWithMembers.name,
      members: teamWithMembers.memberships.map((m) => ({
        id: m.user.id,
        name: m.user.name,
        email: m.user.email,
        role: m.role,
      })),
    });
  } catch (err) {
    if (err?.code === "P2002") {
      return res
        .status(409)
        .json({ error: "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (DB)" });
    }
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
