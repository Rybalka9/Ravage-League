// backend/routes/teamMemberships.js
const express = require("express");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const auth = require("../middleware/auth");

const router = express.Router();

/**
 * üìå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω)
 */
router.post("/:teamId/invite", auth, async (req, res) => {
  const teamId = parseInt(req.params.teamId);
  const { userId } = req.body;

  if (!userId) return res.status(400).json({ error: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å userId" });

  try {
    const team = await prisma.team.findUnique({ where: { id: teamId } });
    if (!team) return res.status(404).json({ error: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –∫–∞–ø–∏—Ç–∞–Ω
    const captain = await prisma.teamMembership.findFirst({
      where: { teamId, userId: req.user.id, role: "captain", leftAt: null },
    });
    if (!captain) {
      return res.status(403).json({ error: "–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
    const existing = await prisma.teamMembership.findFirst({
      where: { teamId, userId, leftAt: null },
    });
    if (existing) {
      return res.status(409).json({ error: "–ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ" });
    }

    // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é player)
    const membership = await prisma.teamMembership.create({
      data: {
        teamId,
        userId,
        role: "player",
        joinedAt: new Date(),
      },
    });

    res.status(201).json({ message: "–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É", membership });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * üìå –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (—Å–∞–º –∏–≥—Ä–æ–∫)
 */
router.post("/:teamId/leave", auth, async (req, res) => {
  const teamId = parseInt(req.params.teamId);

  try {
    const membership = await prisma.teamMembership.findFirst({
      where: { teamId, userId: req.user.id, leftAt: null },
    });

    if (!membership) {
      return res.status(404).json({ error: "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ" });
    }

    // –ö–∞–ø–∏—Ç–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–∏—Ç –¥—Ä—É–≥–æ–≥–æ
    if (membership.role === "captain") {
      return res.status(400).json({ error: "–ö–∞–ø–∏—Ç–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–∑–Ω–∞—á—å—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞" });
    }

    await prisma.teamMembership.update({
      where: { id: membership.id },
      data: { leftAt: new Date() },
    });

    res.json({ message: "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * üìå –ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω)
 */
router.post("/:teamId/kick", auth, async (req, res) => {
  const teamId = parseInt(req.params.teamId);
  const { userId } = req.body;

  if (!userId) return res.status(400).json({ error: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å userId" });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    const captain = await prisma.teamMembership.findFirst({
      where: { teamId, userId: req.user.id, role: "captain", leftAt: null },
    });
    if (!captain) {
      return res.status(403).json({ error: "–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ
    const membership = await prisma.teamMembership.findFirst({
      where: { teamId, userId, leftAt: null },
    });
    if (!membership) {
      return res.status(404).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ" });
    }

    // –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞ (—Å–∞–º–æ–≥–æ —Å–µ–±—è)
    if (membership.role === "captain") {
      return res.status(400).json({ error: "–ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞" });
    }

    await prisma.teamMembership.update({
      where: { id: membership.id },
      data: { leftAt: new Date() },
    });

    res.json({ message: "–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * üìå –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
 */
router.post("/:teamId/transfer-captain", auth, async (req, res) => {
  const teamId = parseInt(req.params.teamId);
  const { userId } = req.body;

  if (!userId) return res.status(400).json({ error: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å userId" });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    const captain = await prisma.teamMembership.findFirst({
      where: { teamId, userId: req.user.id, role: "captain", leftAt: null },
    });
    if (!captain) {
      return res.status(403).json({ error: "–¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ
    const newCaptain = await prisma.teamMembership.findFirst({
      where: { teamId, userId, leftAt: null },
    });
    if (!newCaptain) {
      return res.status(404).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ" });
    }

    // –ú–µ–Ω—è–µ–º —Ä–æ–ª–∏
    await prisma.$transaction([
      prisma.teamMembership.update({
        where: { id: captain.id },
        data: { role: "player" },
      }),
      prisma.teamMembership.update({
        where: { id: newCaptain.id },
        data: { role: "captain" },
      }),
    ]);

    res.json({ message: "–ö–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–æ" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
