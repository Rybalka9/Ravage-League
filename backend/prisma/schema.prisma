datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     String @default("player") // "player" | "admin"
  banned   Boolean @default(false)

  memberships        TeamMembership[]
  invites            Invite[]            @relation("UserInvites")
  complaints         Complaint[]
  discussionPosts    DiscussionPost[]
  discussionComments DiscussionComment[]
  MatchReport        MatchReport[]
}

model Team {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  banned   Boolean @default(false)
  leagueId Int?
  league   League? @relation(fields: [leagueId], references: [id])

  memberships   TeamMembership[]
  invites       Invite[]
  teamStats     TeamStats?
  matchesA      Match[]                  @relation("TeamAMatches")
  matchesB      Match[]                  @relation("TeamBMatches")
  registrations TournamentRegistration[]
}

model League {
  id    Int    @id @default(autoincrement())
  name  String
  prize Int

  teams       Team[]
  matches     Match[]
  tournaments Tournament[]
}

model TeamMembership {
  id       Int       @id @default(autoincrement())
  userId   Int
  teamId   Int
  role     String    @default("player") // "captain" | "player"
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}

model Invite {
  id     Int    @id @default(autoincrement())
  teamId Int
  userId Int
  status String @default("pending") // "pending" | "accepted" | "declined"

  team Team @relation(fields: [teamId], references: [id])
  user User @relation("UserInvites", fields: [userId], references: [id])
}

model Match {
  id           Int      @id @default(autoincrement())
  leagueId     Int?
  tournamentId Int?
  teamAId      Int
  teamBId      Int?
  scheduled    DateTime
  result       String?

  league      League?       @relation(fields: [leagueId], references: [id])
  tournament  Tournament?   @relation(fields: [tournamentId], references: [id])
  teamA       Team          @relation("TeamAMatches", fields: [teamAId], references: [id])
  teamB       Team?         @relation("TeamBMatches", fields: [teamBId], references: [id])
  complaints  Complaint[]
  MatchReport MatchReport[]
}

model MatchReport {
  id          Int      @id @default(autoincrement())
  matchId     Int
  reporterId  Int
  reportedAt  DateTime @default(now())
  scoreA      Int
  scoreB      Int
  status      String   @default("pending") // "pending" | "confirmed" | "rejected" | "finalized"
  confirmedBy Int? // userId who confirmed (second party) â€” optional
  finalizedBy Int? // admin who finalized

  match    Match @relation(fields: [matchId], references: [id])
  reporter User  @relation(fields: [reporterId], references: [id])
}

model TeamStats {
  id     Int @id @default(autoincrement())
  teamId Int @unique
  wins   Int @default(0)
  losses Int @default(0)
  draws  Int @default(0)
  points Int @default(0)

  team Team @relation(fields: [teamId], references: [id])
}

model Tournament {
  id         Int       @id @default(autoincrement())
  name       String
  leagueId   Int?
  format     String
  type       String
  status     String    @default("upcoming")
  startDate  DateTime
  endDate    DateTime?
  maxTeams   Int?
  rules      String?
  discussion String?

  league          League?                  @relation(fields: [leagueId], references: [id])
  matches         Match[]
  registrations   TournamentRegistration[]
  complaints      Complaint[]
  discussionPosts DiscussionPost[]
}

model TournamentRegistration {
  id           Int    @id @default(autoincrement())
  tournamentId Int
  teamId       Int
  status       String @default("pending")

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  team       Team       @relation(fields: [teamId], references: [id])
}

model Complaint {
  id           Int    @id @default(autoincrement())
  tournamentId Int?
  matchId      Int?
  userId       Int
  text         String
  status       String @default("open")

  tournament Tournament? @relation(fields: [tournamentId], references: [id])
  match      Match?      @relation(fields: [matchId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model DiscussionPost {
  id           Int      @id @default(autoincrement())
  tournamentId Int
  userId       Int
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tournament Tournament          @relation(fields: [tournamentId], references: [id])
  user       User                @relation(fields: [userId], references: [id])
  comments   DiscussionComment[]
}

model DiscussionComment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  post DiscussionPost @relation(fields: [postId], references: [id])
  user User           @relation(fields: [userId], references: [id])
}
